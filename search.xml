<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>词法分析器</title>
      <link href="/2019/04/21/ci-fa-fen-xi-qi/"/>
      <url>/2019/04/21/ci-fa-fen-xi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="词法分析器，对PL-0进行词法分析"><a href="#词法分析器，对PL-0进行词法分析" class="headerlink" title="词法分析器，对PL/0进行词法分析"></a>词法分析器，对PL/0进行词法分析</h2><h3 id="Code-txt文件"><a href="#Code-txt文件" class="headerlink" title="Code.txt文件"></a>Code.txt文件</h3><pre><code>const       a&lt;=10;var         b,c;procedure   p;beginend.</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"iostream"</span></span>using namespace std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局变量，保留字表</span><span class="token keyword">static</span> <span class="token keyword">char</span> reserveWord<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"const"</span><span class="token punctuation">,</span><span class="token string">"var"</span><span class="token punctuation">,</span><span class="token string">"procedure"</span><span class="token punctuation">,</span><span class="token string">"begin"</span><span class="token punctuation">,</span><span class="token string">"end"</span><span class="token punctuation">,</span><span class="token string">"odd"</span><span class="token punctuation">,</span><span class="token string">"if"</span><span class="token punctuation">,</span><span class="token string">"then"</span><span class="token punctuation">,</span><span class="token string">"call"</span><span class="token punctuation">,</span><span class="token string">"while"</span><span class="token punctuation">,</span><span class="token string">"do"</span><span class="token punctuation">,</span>        <span class="token string">"read"</span><span class="token punctuation">,</span><span class="token string">"write"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//界符运算符表,根据需要可以自行增加</span><span class="token keyword">static</span> <span class="token keyword">char</span> operatorCode<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"&lt;="</span><span class="token punctuation">,</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">">="</span><span class="token punctuation">,</span><span class="token string">"#"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">":="</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span>  <span class="token keyword">char</span> IDentifierTbl<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标识符表</span><span class="token keyword">static</span> <span class="token keyword">char</span> Delimiter<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'('</span><span class="token punctuation">,</span>        <span class="token string">')'</span><span class="token punctuation">,</span>        <span class="token string">','</span><span class="token punctuation">,</span>        <span class="token string">';'</span><span class="token punctuation">,</span>        <span class="token string">'.'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//enum symbol{</span><span class="token comment" spellcheck="true">//    nul,ident,number,plus,minus,</span><span class="token comment" spellcheck="true">//    times,slash,addsym,eql,neq,</span><span class="token comment" spellcheck="true">//    lss,leq,gtr,geq,lparen,</span><span class="token comment" spellcheck="true">//    rparen,comma,semicolon,period,becomes,</span><span class="token comment" spellcheck="true">//    beginsym,endsym,ifsym,thensym,whilesym,</span><span class="token comment" spellcheck="true">//    writesym,readsym,dosym,callsym,constsym,</span><span class="token comment" spellcheck="true">//    varsym,procsym,</span><span class="token comment" spellcheck="true">//};</span><span class="token keyword">int</span> <span class="token function">SearchReserveWord</span><span class="token punctuation">(</span><span class="token keyword">char</span> reserWord<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>reserWord<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">SearchoperatorCode</span><span class="token punctuation">(</span><span class="token keyword">char</span> operatorcode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>operatorcode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">20</span><span class="token operator">+</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">IsLetter</span><span class="token punctuation">(</span><span class="token keyword">char</span> letter<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>letter<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>letter<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>letter<span class="token operator">>=</span><span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>letter<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">IsNum</span><span class="token punctuation">(</span><span class="token keyword">char</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>num<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//void filterResource(char r[],int p){//滤空格和特殊字符</span><span class="token comment" spellcheck="true">//    char tempStr[10000];</span><span class="token comment" spellcheck="true">//    int count = 0;</span><span class="token comment" spellcheck="true">//    for (int i = 0; i&lt;=p; i++) {</span><span class="token comment" spellcheck="true">//        if ((r[i]==' '&amp;&amp;count!=0&amp;&amp;tempStr[count-1]==' ')||r[i]=='\n'||r[i]=='\t'||r[i]=='\v'||r[i]=='\r') {</span><span class="token comment" spellcheck="true">//            continue;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        tempStr[count++] = r[i];</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    tempStr[count] = '\0';</span><span class="token comment" spellcheck="true">//    strcpy(r, tempStr);</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">void</span> <span class="token function">Scanner</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>syn<span class="token punctuation">,</span><span class="token keyword">char</span> r<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">char</span> token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        token<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">' '</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\t'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\v'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsLetter</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//字母打头,判断是保留字或是标识符</span>        token<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针后移</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsLetter</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">IsNum</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            token<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        token<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        syn <span class="token operator">=</span> <span class="token function">SearchReserveWord</span><span class="token punctuation">(</span>reserveWord<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            syn <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsNum</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是否为无符号整数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsNum</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            token<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        token<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        syn <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">','</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">';'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是否为界符</span>        token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Delimiter<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                syn <span class="token operator">=</span> <span class="token number">14</span><span class="token operator">+</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'/'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'>'</span><span class="token operator">||</span>            r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&lt;'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'='</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是否为运算符</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'>'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&lt;'</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>                token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        syn <span class="token operator">=</span> <span class="token function">SearchoperatorCode</span><span class="token punctuation">(</span>operatorCode<span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            syn <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">EOF</span><span class="token operator">||</span>r<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        syn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// insert code here...</span>    <span class="token keyword">char</span> resourceCode<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> token<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> syn <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//length是标识符表长度</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span><span class="token operator">*</span>fp1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"Code.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//打开源程序</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't open this file"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    resourceCode<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>resourceCode<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>        resourceCode<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    resourceCode<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>resourceCode<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//filterResource(resourceCode,p);</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;resourceCode&lt;&lt;endl;</span>    p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>syn<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Scanner</span><span class="token punctuation">(</span>syn<span class="token punctuation">,</span>resourceCode<span class="token punctuation">,</span>token<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//标识符</span>            bool IsExit <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>IDentifierTbl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    IsExit <span class="token operator">=</span> true<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IsExit<span class="token operator">==</span> false<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>IDentifierTbl<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                length<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout<span class="token operator">&lt;&lt;</span>token<span class="token operator">&lt;&lt;</span><span class="token string">"标识符"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>syn<span class="token operator">&lt;=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//保留字</span>            cout<span class="token operator">&lt;&lt;</span>token<span class="token operator">&lt;&lt;</span><span class="token string">"保留字"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">>=</span><span class="token number">14</span><span class="token operator">&amp;&amp;</span>syn<span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//界符</span>            cout<span class="token operator">&lt;&lt;</span>token<span class="token operator">&lt;&lt;</span><span class="token string">"界符"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">>=</span><span class="token number">20</span><span class="token operator">&amp;&amp;</span>syn<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//操作符(运算符)</span>            cout<span class="token operator">&lt;&lt;</span>token<span class="token operator">&lt;&lt;</span><span class="token string">"运算符"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">==</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//整数</span>            cout<span class="token operator">&lt;&lt;</span>token<span class="token operator">&lt;&lt;</span><span class="token string">"整数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>syn<span class="token operator">==</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//未知字符</span>            cout<span class="token operator">&lt;&lt;</span>token<span class="token operator">&lt;&lt;</span><span class="token string">"未知字符"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"标识符有:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>IDentifierTbl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre><code>/Users/ailuoku6/CLionProjects/Cifafenxi1/cmake-build-debug/Cifafenxi1const       a&lt;=10;var         b,c;procedure   p;beginend.const保留字a标识符&lt;=运算符10整数;界符var保留字b标识符,界符c标识符;界符procedure保留字p标识符;界符begin保留字end保留字.界符标识符有:abcpProcess finished with exit code 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 的基本操作</title>
      <link href="/2019/02/08/git-de-ji-ben-cao-zuo/"/>
      <url>/2019/02/08/git-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要用Git"><a href="#为什么要用Git" class="headerlink" title="为什么要用Git?"></a>为什么要用Git?</h2><p>先来说说 Git 的由来，Git 是一个版本控制软件，最初是由 Linux 之父——林纳斯·托瓦兹 为了更好的管理 Linux 内核代码而编写的。当时 林纳斯 要合并来自其他 Linux 开发者的代码，维护整个 Linux 内核，万一合并代码后出了问题，那么就需要上一个版本的代码，如果是单纯的每个版本都复制保存一份，就需要很多很多代码版本，并且对于频繁的修改，这样手动操作太繁琐了而且也容易出错，所以版本控制就显得非常的必要。</p><pre><code>git init</code></pre><p>用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p><p>执行git init后可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。</p><pre class=" language-angular2"><code class="language-angular2">git clone</code></pre><p>使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p><p>如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：</p><pre class=" language-angular2"><code class="language-angular2"> git clone [url]</code></pre><p>[url] 为你想要复制的项目，就可以了。</p><h3 id="基本快照"><a href="#基本快照" class="headerlink" title="基本快照"></a>基本快照</h3><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目的快照的命令作介绍。</p><pre class=" language-angular2"><code class="language-angular2">git add</code></pre><p>git add 命令可将该文件添加到缓存.</p><p>git status 命令用于查看项目的当前状态。</p><p>接下来我们执行 git add 命令来添加文件：</p><pre class=" language-angular2"><code class="language-angular2">$ git add README hello.php </code></pre><p>现在我们再执行 git status，就可以看到这两个文件已经加上去了。</p><pre class=" language-angular2"><code class="language-angular2">$ git status -sA  READMEA  hello.php</code></pre><pre class=" language-angular2"><code class="language-angular2">git status</code></pre><p>git status 以查看在你上次提交之后是否有修改。</p><p>上面演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p><pre class=" language-angular2"><code class="language-angular2">$ git statusOn branch masterInitial commitChanges to be committed:  (use "git rm --cached <file>..." to unstage)    new file:   README    new file:   hello.php</code></pre><pre class=" language-angular2"><code class="language-angular2">git diff</code></pre><p>执行 git diff 来查看执行 git status 的结果的详细信息。</p><p>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p><ul><li>尚未缓存的改动：git diff</li><li>查看已缓存的改动： git diff –cached</li><li>查看已缓存的与未缓存的所有改动：git diff HEAD</li><li>显示摘要而非整个 diff：git diff –stat</li></ul><p>git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</p><pre class=" language-angular2"><code class="language-angular2">git commit</code></pre><p>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。</p><p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p><pre class=" language-angular2"><code class="language-angular2">$ git config --global user.name 'runoob'$ git config --global user.email test@runoob.com</code></pre><p>我们使用 -m 选项以在命令行中提供提交注释：</p><pre class=" language-angular2"><code class="language-angular2">$ git commit -m "一些改动"</code></pre><h3 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h3><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><pre class=" language-angular2"><code class="language-angular2">git branch (branchname)</code></pre><p>切换分支命令:</p><pre class=" language-angular2"><code class="language-angular2">git checkout (branchname)</code></pre><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><pre class=" language-angular2"><code class="language-angular2">git merge </code></pre><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><h3 id="Git-分支管理-1"><a href="#Git-分支管理-1" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h3><h4 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h4><p>列出分支基本命令：</p><pre class=" language-angular2"><code class="language-angular2">git branch</code></pre><p>此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。</p><p>当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。</p><p>如果我们要手动创建一个分支。执行 git branch (branchname) 即可。</p><pre class=" language-angular2"><code class="language-angular2">$ git branch testing$ git branch* master  testing</code></pre><p>现在我们可以看到，有了一个新分支 testing。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了”testing”分支，Git 将还原你的工作目录到你创建分支时候的样子</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><pre class=" language-angular2"><code class="language-angular2">$ lsREADME$ echo 'runoob.com' > test.txt$ git add .$ git commit -m 'add test.txt'[master 048598f] add test.txt 2 files changed, 1 insertion(+), 3 deletions(-) delete mode 100644 hello.php create mode 100644 test.txt$ lsREADME        test.txt$ git checkout testingSwitched to branch 'testing'$ lsREADME        hello.php</code></pre><p>当我们切换到”testing”分支的时候，我们添加的新文件test.txt被移除了, 原来被删除的文件hello.php文件又出现了。切换回”master”分支的时候，它们有重新出现了。</p><pre class=" language-angular2"><code class="language-angular2">$ git checkout masterSwitched to branch 'master'$ lsREADME        test.txt</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>删除分支命令：</p><pre class=" language-angular2"><code class="language-angular2">git branch -d (branchname)</code></pre><p>例如我们要删除”testing”分支：</p><pre class=" language-angular2"><code class="language-angular2">$ git branch* master  testing$ git branch -d testingDeleted branch testing (was 85fc7e7).$ git branch* master</code></pre><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><pre class=" language-angular2"><code class="language-angular2">git merge</code></pre><h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</p><pre class=" language-angular2"><code class="language-angular2">git remote add [shortname] [url]</code></pre><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>推送你的新分支与数据到某个远端仓库命令:</p><pre class=" language-angular2"><code class="language-angular2">git push [alias] [branch]</code></pre><p>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。</p><pre class=" language-angular2"><code class="language-angular2">$ git push -u origin master    # 推送到 Github</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图的邻接表&amp;深度优先搜索</title>
      <link href="/2018/12/19/tu-de-lin-jie-biao-shen-du-you-xian-sou-suo/"/>
      <url>/2018/12/19/tu-de-lin-jie-biao-shen-du-you-xian-sou-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="图的邻接表-amp-深度优先搜索"><a href="#图的邻接表-amp-深度优先搜索" class="headerlink" title="图的邻接表&amp;深度优先搜索"></a>图的邻接表&amp;深度优先搜索</h2><ul><li>图的邻接表</li><li>深度优先搜索</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAX 30</span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE 1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span><span class="token keyword">int</span> book<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> edgenode<span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token keyword">char</span> info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> edgenode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>edgeNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> vexnode<span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> edgenode <span class="token operator">*</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span>adjlist<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    adjlist vertices<span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span><span class="token punctuation">}</span>Graph <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GreateGraph</span><span class="token punctuation">(</span>Graph <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>p<span class="token punctuation">;</span>    edgeNode <span class="token operator">*</span>edgeNode_p<span class="token punctuation">,</span><span class="token operator">*</span>temp<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入顶点个数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%*c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>vexnum<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>vexnum <span class="token operator">=</span> vexnum<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>arcnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vexnum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vexnum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个顶点的值:\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c%*c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个顶点的邻接点(-1代表结束):\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%*c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">></span>vexnum<span class="token operator">||</span>p<span class="token operator">==</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s，请重新输入(-1代表结束):\n"</span><span class="token punctuation">,</span>p<span class="token operator">==</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"邻接点不能是自身"</span><span class="token punctuation">:</span><span class="token string">"没有这个邻接点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%*c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//使用头插法加入边表结点</span>            edgeNode_p <span class="token operator">=</span> <span class="token punctuation">(</span>edgeNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>edgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            edgeNode_p<span class="token operator">-></span>adjvex <span class="token operator">=</span> p<span class="token number">-1</span><span class="token punctuation">;</span>            edgeNode_p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> L<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>link<span class="token punctuation">;</span>            edgeNode_p<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            L<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>link <span class="token operator">=</span> edgeNode_p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            edgeNode_p2 = (edgeNode*)malloc(sizeof(edgeNode));</span><span class="token comment" spellcheck="true">//            edgeNode_p2->adjvex = i;</span><span class="token comment" spellcheck="true">//            edgeNode_p2->next = NULL;</span><span class="token comment" spellcheck="true">//            temp = L.vertices[p-1].link;</span><span class="token comment" spellcheck="true">//            edgeNode_p2->next = temp;</span><span class="token comment" spellcheck="true">//            L.vertices[p-1].link = edgeNode_p2;</span>            L<span class="token punctuation">.</span>arcnum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%*c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Graph L<span class="token punctuation">,</span><span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>    book<span class="token punctuation">[</span>point<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    edgenode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">.</span>link<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c     "</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token operator">!=</span>TRUE<span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DFS_Tra</span><span class="token punctuation">(</span>Graph L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> nodenum <span class="token operator">=</span> L<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>    <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nodenum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//标记访问状态</span>        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入搜索起始点:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>start<span class="token operator">></span>nodenum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有这个点，请重新输入:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> start<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Graph L<span class="token punctuation">;</span>    <span class="token function">GreateGraph</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DFS_Tra</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="图用例"><a href="#图用例" class="headerlink" title="图用例"></a>图用例</h3><p><img src="https://raw.githubusercontent.com/ailuoku6/ailuoku6.github.io/master/img/graph_demo.png" alt="图用例" title="图用例"></p><pre><code>//v1即表示1，懒得再画图了</code></pre><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class=" language-c"><code class="language-c">请输入顶点个数<span class="token punctuation">:</span><span class="token number">8</span>请输入第<span class="token number">1</span>个顶点的值<span class="token punctuation">:</span><span class="token number">1</span>请输入第<span class="token number">1</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">2</span>个顶点的值<span class="token punctuation">:</span><span class="token number">2</span>请输入第<span class="token number">2</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token number">4</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">3</span>个顶点的值<span class="token punctuation">:</span><span class="token number">3</span>请输入第<span class="token number">3</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token number">6</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">4</span>个顶点的值<span class="token punctuation">:</span><span class="token number">4</span>请输入第<span class="token number">4</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">5</span>个顶点的值<span class="token punctuation">:</span><span class="token number">5</span>请输入第<span class="token number">5</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">6</span>个顶点的值<span class="token punctuation">:</span><span class="token number">6</span>请输入第<span class="token number">6</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">7</span>个顶点的值<span class="token punctuation">:</span><span class="token number">7</span>请输入第<span class="token number">7</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span>请输入第<span class="token number">8</span>个顶点的值<span class="token punctuation">:</span><span class="token number">8</span>请输入第<span class="token number">8</span>个顶点的邻接点<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span>请输入搜索起始点<span class="token punctuation">:</span><span class="token number">1</span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class=" language-c"><code class="language-c"><span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">7</span>     <span class="token number">6</span>     <span class="token number">2</span>     <span class="token number">5</span>     <span class="token number">8</span>     <span class="token number">4</span>     Program ended with exit code<span class="token punctuation">:</span> <span class="token number">0</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//程序从右到左开始遍历，与参考答案不一样，但都正确.</span>参考答案遍历结果为<span class="token punctuation">:</span><span class="token number">1</span>→<span class="token number">2</span>→<span class="token number">4</span>→<span class="token number">8</span>→<span class="token number">5</span>→<span class="token number">3</span>→<span class="token number">6</span>→<span class="token number">7</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树2静态二叉树</title>
      <link href="/2018/12/08/er-cha-shu-2-jing-tai-er-cha-shu/"/>
      <url>/2018/12/08/er-cha-shu-2-jing-tai-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构之二叉树"><a href="#数据结构之二叉树" class="headerlink" title="数据结构之二叉树"></a>数据结构之二叉树</h2><ul><li>二叉树的先序、中序、后序遍历</li><li>动态二叉树转化成静态二叉树</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR -1</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX 100</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> ElementType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTnode<span class="token punctuation">{</span>    ElementType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiTnode <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTnode<span class="token punctuation">,</span><span class="token operator">*</span>Node_p<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Bilir<span class="token punctuation">{</span>    ElementType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> lchild<span class="token punctuation">,</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>Bilir<span class="token punctuation">,</span><span class="token operator">*</span>Bilir_p<span class="token punctuation">;</span>Status <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>Node_p <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    ElementType item<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入结点的值(空格代表结束):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T <span class="token operator">=</span> <span class="token punctuation">(</span>Node_p<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    T<span class="token operator">-></span>data <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 的左孩子:\n"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 的右孩子:\n"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>Node_p T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>Node_p T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>Node_p T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">turnTo</span><span class="token punctuation">(</span>Node_p T<span class="token punctuation">,</span>Bilir a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>index<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> T<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>index <span class="token operator">=</span> <span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token function">turnTo</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">,</span>a<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>index <span class="token operator">=</span> <span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token function">turnTo</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">,</span>a<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">ReadBirlr</span><span class="token punctuation">(</span>Bilir a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2c "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node_p Tree<span class="token punctuation">;</span>    Bilir a<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">turnTo</span><span class="token punctuation">(</span>Tree<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReadBirlr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="二叉树用例"><a href="#二叉树用例" class="headerlink" title="二叉树用例"></a>二叉树用例</h3><p><img src="https://raw.githubusercontent.com/ailuoku6/ailuoku6.github.io/master/img/bitree.png" alt="二叉树用例" title="二叉树用例"></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class=" language-c"><code class="language-c">请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>ee 的左孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>gg 的左孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>tt 的左孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>t 的右孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>g 的右孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>e 的右孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>kk 的左孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>yy 的左孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>y 的右孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span>k 的右孩子<span class="token punctuation">:</span>请输入结点的值<span class="token punctuation">(</span>空格代表结束<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class=" language-c"><code class="language-c">e g t k y t g e y k t g y k e  <span class="token number">1</span>  <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token number">4</span> <span class="token operator">-</span><span class="token number">1</span>  e  g  t  k  y  <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多项式相加</title>
      <link href="/2018/12/01/duo-xiang-shi-xiang-jia/"/>
      <url>/2018/12/01/duo-xiang-shi-xiang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构之多项式"><a href="#数据结构之多项式" class="headerlink" title="数据结构之多项式"></a>数据结构之多项式</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR -1</span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指数升序排列,第一项不存值,由于用了cpp的引用特性,需要用cpp的编译器</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> mulnode<span class="token punctuation">{</span>    ElemType coef<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//系数</span>    ElemType expo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指数</span>    <span class="token keyword">struct</span> mulnode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>mulnode<span class="token punctuation">,</span><span class="token operator">*</span>mult<span class="token punctuation">;</span>status <span class="token function">AddItem</span><span class="token punctuation">(</span>mult <span class="token operator">&amp;</span>List<span class="token punctuation">,</span>ElemType coef<span class="token punctuation">,</span>ElemType expo<span class="token punctuation">)</span><span class="token punctuation">{</span>    mult q<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    mult p <span class="token operator">=</span> List<span class="token punctuation">;</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>mult<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mulnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">-></span>coef <span class="token operator">=</span> coef<span class="token punctuation">;</span>q<span class="token operator">-></span>expo <span class="token operator">=</span> expo<span class="token punctuation">;</span>q<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>next<span class="token operator">-></span>expo<span class="token operator">&lt;</span>expo<span class="token punctuation">)</span><span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>next<span class="token operator">-></span>expo<span class="token operator">==</span>expo<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token operator">-></span>next<span class="token operator">-></span>coef<span class="token operator">+</span><span class="token operator">=</span>coef<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化并赋初值为0</span>status <span class="token function">InitMult</span><span class="token punctuation">(</span>mult <span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>    ElemType coef<span class="token punctuation">,</span>expo<span class="token punctuation">;</span>    mult temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时节点指针</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>mult<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mulnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">-></span>coef <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>expo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>coef<span class="token punctuation">,</span><span class="token operator">&amp;</span>expo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AddItem</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>coef<span class="token punctuation">,</span>expo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>status <span class="token function">ReadMult</span><span class="token punctuation">(</span>mult p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)  "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>coef<span class="token punctuation">,</span>p<span class="token operator">-></span>expo<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n----------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多项式相加，结果存到p3</span>status <span class="token function">AddMult</span><span class="token punctuation">(</span>mult <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span>mult <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span>mult <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">{</span>    mult pa<span class="token punctuation">,</span>pb<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>T<span class="token punctuation">;</span>    pa <span class="token operator">=</span> p1<span class="token operator">-></span>next<span class="token punctuation">;</span>    pb <span class="token operator">=</span> p2<span class="token operator">-></span>next<span class="token punctuation">;</span>    pre <span class="token operator">=</span> p3<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa<span class="token operator">&amp;&amp;</span>pb<span class="token punctuation">)</span><span class="token punctuation">{</span>        T <span class="token operator">=</span> <span class="token punctuation">(</span>mult<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mulnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pa<span class="token operator">-></span>expo<span class="token operator">&lt;</span>pb<span class="token operator">-></span>expo<span class="token punctuation">)</span><span class="token punctuation">{</span>            T<span class="token operator">-></span>coef <span class="token operator">=</span> pa<span class="token operator">-></span>coef<span class="token punctuation">;</span>            T<span class="token operator">-></span>expo <span class="token operator">=</span> pa<span class="token operator">-></span>expo<span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pa<span class="token operator">-></span>expo <span class="token operator">==</span> pb<span class="token operator">-></span>expo<span class="token punctuation">)</span><span class="token punctuation">{</span>            T<span class="token operator">-></span>coef <span class="token operator">=</span> pa<span class="token operator">-></span>coef<span class="token operator">+</span>pb<span class="token operator">-></span>coef<span class="token punctuation">;</span>            T<span class="token operator">-></span>expo <span class="token operator">=</span> pa<span class="token operator">-></span>expo<span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-></span>next<span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            T<span class="token operator">-></span>coef <span class="token operator">=</span> pb<span class="token operator">-></span>coef<span class="token punctuation">;</span>            T<span class="token operator">-></span>expo <span class="token operator">=</span> pb<span class="token operator">-></span>expo<span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre<span class="token operator">-></span>next <span class="token operator">=</span> T<span class="token punctuation">;</span>        pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pre<span class="token operator">-></span>next <span class="token operator">=</span> pa<span class="token operator">?</span>pa<span class="token punctuation">:</span>pb<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mult p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">;</span>    <span class="token keyword">int</span> p1_length<span class="token punctuation">,</span>p2_length<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入p1多项式长度:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p1_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入p2多项式长度:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p2_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitMult</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p1_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitMult</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span>p2_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitMult</span><span class="token punctuation">(</span>p3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReadMult</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReadMult</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AddMult</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReadMult</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今年暑假不AC</title>
      <link href="/2018/11/18/jin-nian-shu-jia-bu-ac/"/>
      <url>/2018/11/18/jin-nian-shu-jia-bu-ac/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>“今年暑假不AC？”<br><br>“是的。”<br><br>“那你干什么呢？”<br><br>“看世界杯呀，笨蛋！”<br><br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><h3 id="ouput"><a href="#ouput" class="headerlink" title="ouput"></a>ouput</h3><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre class=" language-c"><code class="language-c"><span class="token number">12</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">0</span> <span class="token number">7</span><span class="token number">3</span> <span class="token number">8</span><span class="token number">15</span> <span class="token number">19</span><span class="token number">15</span> <span class="token number">20</span><span class="token number">10</span> <span class="token number">15</span><span class="token number">8</span> <span class="token number">18</span><span class="token number">6</span> <span class="token number">12</span><span class="token number">5</span> <span class="token number">10</span><span class="token number">4</span> <span class="token number">14</span><span class="token number">2</span> <span class="token number">9</span><span class="token number">0</span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre class=" language-c"><code class="language-c"><span class="token number">5</span></code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  main.c</span><span class="token comment" spellcheck="true">//  潜伏</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//  Created by ailuoku6 on 2018/10/19.</span><span class="token comment" spellcheck="true">//  Copyright © 2018年 ailuoku6. All rights reserved.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span><span class="token punctuation">}</span>jiemu<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>jiemu<span class="token operator">*</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    jiemu <span class="token operator">*</span>temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>start<span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>start<span class="token punctuation">)</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>start<span class="token operator">==</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>start<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>end<span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// insert code here...</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>count<span class="token punctuation">;</span>    jiemu<span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>        count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            jiemu <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>jiemu <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>jiemu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>start<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>end<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>start<span class="token operator">>=</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>end<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>end<span class="token operator">&lt;</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/27/hello-world/"/>
      <url>/2018/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
